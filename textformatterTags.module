<?php

/**
 * Tags for Text fields
 *
 * Module that gives you option to run filters over blocks of text in text fields via blocks tags
 * or invoke advanced funcionality via simple tags
 * 
 * @author Adam Kiss
 * @version 0.10
 * @since 2012-09-20
 * @license WTFPL <http://sam.zoy.org/wtfpl/>
 * 
 * @link http://www.adamkiss.com
 */

class TextformatterTags extends WireData implements Module, ConfigurableModule { 

/***************************************************************************************************
                                                                                         MODULE INFO
***************************************************************************************************/

  public static function getModuleInfo() {
    return array(
      // basic information
      'title' => 'Tags for Text fields',
      'summary' => "Gives you simple and block tags funcionality in text fields",
      'version' => 10, 
      // load information
      'singular' => true,
      'autoload' => false,
      // requirements
      'requires' => 'TextformatterPlaintextMatrix'
    );
  }

/***************************************************************************************************
                                                                                           VARIABLES
***************************************************************************************************/
  
  /**
   * Regexp for pair tags
   */
  private $_rgx_pair = '/{{\s?([^}]*)\s?([^}]*)?\s?}}([^{]*){{\s?\/\\1\s?}}/';
  
  /**
   * Regexp for single tags
   */
  private $_rgx_tag  = '/{{\s?([^}]*)\s?([^}]*)?\s?}}/';

  /**
   * Available groups/functions
   */
  private $available_functions = false;

  /**
   * Array of available modules
   */
  private $available_modules = false;

  /**
   * Array of loaded modules
   */
  private $loaded_modules = false;

/***************************************************************************************************
                                                                   MODULE STUFF (SUBMODULES, RUNNER)
***************************************************************************************************/
  
  public static function getModuleConfigInputfields(array $data) { return $data; }

  public function load_module($group) {
    try {
      
      $module = $this->available_modules[$group];
      if (!in_array($module, $this->loaded_modules)){
        $this->loaded_modules[$module] = $this->modules->get($module);
      }
      return $this->loaded_modules[$module];

    } catch (Exception $e) {
      // I have no idea what I'm doing
    }
  }

  public function init() {
    echo "<pre>";

    // $data = $this->modules->getModuleConfigData(get_class($this));
    // $data = array(
    //   'available_modules'=>array(
    //   ),
    //   'available_functions'=>array(
    //   )
    // );
    // $this->modules->saveModuleConfigData(get_class($this), $data);
    var_dump($this->modules->getModuleConfigData(get_class($this)));

    echo "</pre>";
  }

  public function formatValue(Page $page, Field $field, &$value) {
    //$str = $this->applyTags($str);
    //$value = $this->parsePairTags($value);

    echo "<pre>";

    //$this->loaded_modules = array();
    // $m=$this->modules->get('TagsExample');
    // var_dump('---');
    // var_dump($this->itags);

    echo "</pre>";
  }

/***************************************************************************************************
                                                                           DATA MANIPULATION & CACHE
***************************************************************************************************/


  private function applyTags( $text ) {
    //init
    $html = $text;

    $found = ''; $tagsFound = array();

    preg_match_all($this->_rgx_tag, $html, $found, PREG_SET_ORDER);

    foreach ($found as $f){
      try {
        $original = $f[0];
        $parts = explode(' ', $f[1]);
        $tag = explode(':', array_shift($parts));
        // $tag now should be array(0=>group, 1=>functions)
        $parameters = implode('', $parts);
        // $parameters now should contain PW parsable query

        //apply tag by group, function and send parameters
        $html = str_ireplace(
          $original,
          $this->apply_tag($tag[0], $tag[1], $parameters, $original),
          $html);
      } catch (Exception $e) {
        //
      }
    }

    return $html;
  }

  private function parsePairTags( $text ){

    $found = ''; $pairsFound = array();

    preg_match_all($this->_rgx_pair, $text, $found, PREG_SET_ORDER);

    foreach ($found as $f){ 
      var_dump($f);
    }

    return $text;

  }

  private function apply_tag($group, $function, $parameters, $original_tag){
    // look up if we have such tag
    $exists = true;
    if ($exists) {
      $return = "<strong>Calling function {$function} from group {$group} ";
      if (!empty($parameters)){
        $params = new Selectors($parameters);
        $return .= "with parameters: ";
        foreach ($params as $p) {
          $return .= " {$p->field} set as {$p->value} & ";
        }
        $return .= ". </strong>";
      }else{
        $return .= "without parameters.</strong>";
      }
      return $return;
    }else{
      return $original_tag;
    }
  }
}
